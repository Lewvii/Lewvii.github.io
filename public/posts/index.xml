<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Lewvii&#39;s Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Lewvii&#39;s Blog</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 20 Mar 2025 18:43:26 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LLVM</title>
      <link>http://localhost:1313/posts/llvm/</link>
      <pubDate>Thu, 20 Mar 2025 18:43:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/llvm/</guid>
      <description>&lt;h1 id=&#34;以下是关于-llvm-项目依赖情况的分析以及它如何实现相对独立的机制&#34;&gt;以下是关于 LLVM 项目依赖情况的分析，以及它如何实现相对独立的机制：&lt;/h1&gt;
&lt;hr&gt;
&lt;h3 id=&#34;llvm-如何实现相对独立&#34;&gt;LLVM 如何实现“相对独立”&lt;/h3&gt;
&lt;p&gt;LLVM 项目设计上追求模块化和自给自足，这体现在以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自举（Self-Hosting）能力&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LLVM 的前端编译器 Clang 是专门为 LLVM 设计的。开发者可以用一个现有的编译器（如 GCC）先构建 Clang，然后用 Clang 再构建 LLVM，形成自举。&lt;/li&gt;
&lt;li&gt;自举的好处是，LLVM 不长期依赖外部编译器。一旦 Clang 可用，它就能接管后续的构建过程。这种设计让 LLVM 在工具链层面尽量减少对外部项目的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模块化架构&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LLVM 的核心是一个编译器基础设施库（IR、优化器、代码生成器等），这些组件是自包含的。它不依赖外部的解析器、优化器或其他编译器框架，而是自己实现了所有关键功能。&lt;/li&gt;
&lt;li&gt;例如，Clang（前端）直接生成 LLVM IR（中间表示），然后交给 LLVM 核心处理，不需要借助其他工具或库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最小化外部库使用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LLVM 开发者有意避免引入大型外部依赖。例如：
&lt;ul&gt;
&lt;li&gt;不使用 Boost 这样的大型 C++ 库，而是自己实现需要的工具函数。&lt;/li&gt;
&lt;li&gt;文件格式（如 ELF、Mach-O）的解析器是内置的，而不是依赖外部库（如 &lt;code&gt;libbfd&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这种策略减少了外部库的版本兼容性问题，也让 LLVM 更容易在不同平台上部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨平台设计&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LLVM 的代码被设计为高度可移植，避免绑定到特定的操作系统或硬件。它通过抽象层（如 &lt;code&gt;Support&lt;/code&gt; 库）处理平台差异，例如文件系统操作、线程管理等，这些功能都是自己实现的，而不是依赖外部库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;静态链接和独立性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在构建时，LLVM 通常会将核心功能静态链接到最终的可执行文件中（如 &lt;code&gt;clang&lt;/code&gt; 或 &lt;code&gt;lli&lt;/code&gt;）。这意味着用户拿到一个 LLVM 工具后，通常不需要额外安装其他运行时库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;llvm-的依赖情况&#34;&gt;LLVM 的依赖情况&lt;/h3&gt;
&lt;p&gt;LLVM 项目并不是完全没有依赖，而是它的依赖被刻意控制在最小范围，以保持移植性和独立性。以下是实际情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;核心依赖&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C++ 标准库&lt;/strong&gt;：LLVM 是用 C++ 写的，因此依赖于目标平台的 C++ 标准库（如 &lt;code&gt;libstdc++&lt;/code&gt; 或 &lt;code&gt;libc++&lt;/code&gt;）。不过，它不绑定到某个特定的标准库实现，而是使用标准的 C++ 特性，尽量保持跨平台兼容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统和工具链&lt;/strong&gt;：LLVM 需要基本的操作系统支持（文件 I/O、线程等）和一个现有的 C++ 编译器来构建自己（如 GCC、Clang 或 MSVC）。但这些是构建时的“环境依赖”，而不是运行时的库依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可选依赖&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git</title>
      <link>http://localhost:1313/posts/git/</link>
      <pubDate>Tue, 18 Mar 2025 09:57:19 +0800</pubDate>
      <guid>http://localhost:1313/posts/git/</guid>
      <description>&lt;h1 id=&#34;引用&#34;&gt;引用&lt;/h1&gt;
&lt;p&gt;在 Git 中，&amp;ldquo;引用&amp;rdquo;（References，简称 &lt;strong&gt;refs&lt;/strong&gt;）是管理提交历史的核心机制之一。引用本质上是&lt;strong&gt;指向 Git 对象的指针&lt;/strong&gt;（最常见的是指向提交对象），用于方便地标识分支、标签、远程仓库等。以下是 Git 引用的详细解析：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;一引用的本质&#34;&gt;一、引用的本质&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;底层存储&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git 引用存储在 &lt;code&gt;.git/refs&lt;/code&gt; 目录中，每个引用对应一个文件，文件中保存的是&lt;strong&gt;目标对象的 SHA-1 哈希值&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如：&lt;code&gt;.git/refs/heads/main&lt;/code&gt; 文件中存储的是 &lt;code&gt;main&lt;/code&gt; 分支的最新提交的哈希值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;引用的作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替代直接使用 SHA-1 哈希值，简化操作（如切换分支、查看提交历史）。&lt;/li&gt;
&lt;li&gt;动态跟踪代码的最新状态（如分支的移动）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;二引用的类型&#34;&gt;二、引用的类型&lt;/h3&gt;
&lt;p&gt;Git 引用分为以下几类：&lt;/p&gt;
&lt;h3 id=&#34;1-本地分支branches&#34;&gt;1. &lt;strong&gt;本地分支（Branches）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;: &lt;code&gt;.git/refs/heads/&amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;: 指向分支的最新提交（即分支的“头”）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看 main 分支的最新提交&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat .git/refs/heads/main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-标签tags&#34;&gt;2. &lt;strong&gt;标签（Tags）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;: &lt;code&gt;.git/refs/tags/&amp;lt;tag-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;轻量标签&lt;/strong&gt;: 直接指向某个提交的哈希值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;附注标签&lt;/strong&gt;: 指向一个标签对象（包含作者、日期等信息），再由标签对象指向提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看标签 v1.0 指向的提交&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat .git/refs/tags/v1.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-远程跟踪分支remote-tracking-branches&#34;&gt;3. &lt;strong&gt;远程跟踪分支（Remote-Tracking Branches）&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;: &lt;code&gt;.git/refs/remotes/&amp;lt;remote-name&amp;gt;/&amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;: 记录远程仓库分支的最后已知状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看远程仓库 origin 的 main 分支状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat .git/refs/remotes/origin/main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-特殊引用&#34;&gt;4. &lt;strong&gt;特殊引用&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HEAD&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>我的第一篇博客</title>
      <link>http://localhost:1313/posts/my-first-post/</link>
      <pubDate>Sun, 16 Mar 2025 23:00:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/my-first-post/</guid>
      <description>&lt;p&gt;欢迎体验我的博客！这是一个用Hugo搭建的网站。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
